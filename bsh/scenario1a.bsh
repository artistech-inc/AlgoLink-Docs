import com.artistech.algolink.orgs.scenario1.Scenario1Config;

import com.artistech.algolink.core.DataBuilder;
import com.artistech.algolink.core.DataBuilderConfig;
import com.artistech.algolink.core.Organization;
import com.artistech.algolink.core.Population;
import com.artistech.algolink.core.PopulationConfig;
import com.artistech.algolink.serializers.IAlgoLinkSerializer;
import com.artistech.algolink.serializers.JsonSerializer;
import com.artistech.algolink.writers.IAlgoLinkWriter;
import com.artistech.algolink.writers.IWriterFactory;
import com.artistech.algolink.writers.JsonCommsWriter;
import com.artistech.algolink.writers.PolyMakeWriter;
import com.artistech.algolink.writers.WriterFactory;

//not strictly necessary, but if running multiple
//simulations in serial in the same script, this would be necessary
com.artistech.utils.Random.reset(true);

//initialize configs:
DataBuilderConfig dbc = new DataBuilderConfig();
PopulationConfig pc = new PopulationConfig();

dbc.setDuration(1440 * 28);
dbc.setRealTimeFactor(0);
dbc.setName("evo-dyn-a");
pc.setSize(100000);
Population pop = pc.createPopulation(dbc.getStartTime());

//initialize orgs:
for(int ii = 0; ii < 6; ii++) {
    Scenario1Config sc = new Scenario1Config();
    sc.setEvolve(false);
    sc.setDynamics(false);
    Organization o = sc.createOrganization(dbc.getStartTime());
    //create population:
    pop.addOrganization(o, dbc.getStartTime());
}

//create data builder:
DataBuilder db = dbc.createDataBuilder(pop);

//initialize serializers/writers:
//IWriterFactory factory = WriterFactory.defaultFactory();
//IAlgoLinkWriter w = factory.createInstance(PolyMakeWriter.class);
//w.initialize(db);
//w = factory.createInstance(JsonCommsWriter.class);
//w.initialize(db);
db.initialize();

//IAlgoLinkSerializer serializer = new JsonSerializer();
//serializer.serialize(db, pop);

//run and wait:
db.builderThread().start();
db.waitForTermination();