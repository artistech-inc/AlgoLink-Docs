import com.artistech.algolink.mq.DistributedMaster;
import com.artistech.algolink.AlgoLinkInfo;

import com.artistech.algolink.ent.DataBuilderConfig;
import com.artistech.algolink.core.PopulationConfig;
import com.artistech.utils.logging.Logging;
import java.util.Calendar;
import java.util.logging.Logger;
import java.util.logging.Level;

Logging.initLogging(new AlgoLinkInfo());
Logger logger = Logger.getLogger("com.artistech.algolink.bsh.noise-ent");
int max_num_orgs = 18;
int max_factor = 9; //inclusive
int min_factor = 1; //inclusive
int comms_factor = 2000;
boolean do_broadcast = true;
int duration = 60;
int population_size = 200000;

//loop for a factor of 1 to 9
//then for each factor, create 1 to 18 organizations to simulate....
for(int ii = min_factor; ii <= max_factor; ii++) {
    for (int jj = 3; jj < max_num_orgs; j += 3) {
        DataBuilderConfig dbc = new DataBuilderConfig();
        PopulationConfig pc = new PopulationConfig();

        dbc.setName("noise-" + Integer.toString(ii) + "-" + Integer.toString(jj + 1) + "-" + Boolean.toString(do_broadcast));
        dbc.setBroadcastCommunications(do_broadcast);
        dbc.setDuration(duration);
        pc.setSize(population_size);

        Calendar start = Calendar.getInstance();
        logger.log(Level.INFO, "Start Time for {1} Factor: {0}", new Object[]{com.artistech.utils.TypeHandler.dateToString(start), ii});

        int size = (comms_factor * ii) / (jj + 1);
        StringBuilder sb = new StringBuilder();
        DistributedMaster dm = new DistributedMaster(dbc, pc);

        sb.append("{");
        for (int kk = 0; kk <= jj; kk++) {
            sb.append("\"noise" + Integer.toString(kk) + "\" : \"com.artistech.algolink.orgs.noise.NoiseConfig\"");
            if (kk <= jj - 1) {
                sb.append(",");
            }
            String noise1 = "{\"commsPerMinute\" : " + Integer.toString(size) + " }";
            dm.setNameValuePair("noise" + Integer.toString(kk), noise1);
            logger.log(Level.INFO, noise1);
        }
        sb.append("}");
        String config = sb.toString();
        logger.log(Level.INFO, config);
        
        dm.setOrganizations(config);
        dm.addWriter(com.artistech.algolink.writers.JsonCommsWriter.class);
        
        Thread t = new Thread(dm);
        t.start();
        t.join();

        java.util.Calendar end = java.util.Calendar.getInstance();
        logger.log(Level.INFO, "End Time for {1} Factor and {2} Orgs: {0}", new Object[]{com.artistech.utils.TypeHandler.dateToString(end), ii, jj + 1});
        long time = end.getTimeInMillis() - start.getTimeInMillis();
        logger.log(Level.INFO, "Time Consumed: {0} ms", new Object[]{time});

        System.gc();
    }
}
