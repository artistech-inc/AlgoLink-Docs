//--------------------------------------------------------------------
//SCRIPT FOR RUNNING THE EMANE SIMULATION
//--------------------------------------------------------------------
//init the variables that can be passed in as a command line argument:
//condition = the condition to run (default Condition3)
//duration = the duration of the simulation (default 120)
//realTimeFactor = the speed factor used to slow the simulation down (default 500)
//randomSeed = the seed for the random number generator (default = 51)
//--------------------------------------------------------------------
//to set these on the command line use the -v option
//java -Xmx4g -jar AlgoLink-nscta.jar -bsh emane-noise.bsh -v randomSeed=41 -v shimTimeout=1000 -v responseSize=60000
//--------------------------------------------------------------------

import com.artistech.algolink.core.*;
import com.artistech.algolink.writers.*;
import com.artistech.algolink.nscta.shim.ShimCommFilter;
import com.artistech.algolink.nscta.shim.ShimCommFilterConfig;
import com.artistech.algolink.orgs.noise.NoiseConfig;

import com.artistech.algolink.AlgoLinkInfo;

import com.artistech.algolink.core.PopulationConfig;
import com.artistech.utils.logging.Logging;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.logging.Logger;
import java.util.logging.Level;

//initialize the logging
Logging.initLogging(new AlgoLinkInfo());

//create a logger
Logger logger = Logger.getLogger("com.artistech.algolink.bsh.emane");

if (randomSeed == void) {
    randomSeed = 51;
} else {
    randomSeed = Integer.parseInt(randomSeed);
}

if (duration == void) {
    duration = 120;
} else {
    duration = Integer.parseInt(duration);
}

if (realTimeFactor == void) {
    realTimeFactor = 1000;
} else {
    realTimeFactor = Integer.parseInt(realTimeFactor);
}

if (responseSize == void) {
    responseSize = 3000;
} else {
    responseSize = Integer.parseInt(responseSize);
}

if (shimTimeout == void) {
    shimTimeout = 250;
} else {
    shimTimeout = Long.parseLong(shimTimeout);
}

if (stackLoc == void) {
    stackLoc = 2;
} else {
    stackLoc = Integer.parseInt(stackLoc);
}

logger.log(Level.INFO, "Setting Real Time Factor: {0}", new Object[]{Integer.toString(realTimeFactor)});
logger.log(Level.INFO, "Setting Duration: {0}", new Object[]{Integer.toString(duration)});
logger.log(Level.INFO, "Setting Random Seed: {0}", new Object[]{Integer.toString(randomSeed)});
logger.log(Level.INFO, "Setting Shim Response Size: {0}", new Object[]{Integer.toString(responseSize)});
logger.log(Level.INFO, "Setting Shim Timeout: {0} ms", new Object[]{Long.toString(shimTimeout)});
logger.log(Level.INFO, "Setting StackLoc: {0}", new Object[]{Integer.toString(stackLoc)});
//init random
com.artistech.utils.Random.setSeed(randomSeed);
com.artistech.utils.Random.reset(true);

NoiseConfig ec = new NoiseConfig();
//create the DataBuilderConfig object (factory for the DataBuilder)
DataBuilderConfig dbc = new DataBuilderConfig();
//create the PopulationConfig object (factyory for the Population)
PopulationConfig pc = new PopulationConfig();

//create the organization
Organization org = ec.createOrganization(Calendar.getInstance());

//create the shim config filter
//this should be done before simply to get a count of how many
//nodes are in the shim config.
ShimCommFilterConfig filter_config = new ShimCommFilterConfig();
filter_config.setStackLoc(stackLoc);

//create the shim communication filter
ShimCommFilter filter = new ShimCommFilter(filter_config);

//create the population
pc.setSize(Math.max(filter_config.getNames().size(), org.getMaxSize()));
Population pop = pc.createPopulation(Calendar.getInstance());

//this must be done here to instantiate the Entity objects inside of AlgoLink
random_entities = pop.getRandom(filter_config.getNames().size());

//take each entity and register with the shim comm filter
//registering the name w/ the organization will create any
//pairings that may be necessary (i.e. for group structure)
int count = 0;
ArrayList ents = new ArrayList(filter_config.getNames());
for(Entity ent : random_entities) {
    if(count < ents.size()) {
        ent.setName(filter, ents.get(count));
        ent.setName(org, ents.get(count));
        count += 1;
        logger.log(Level.INFO, ent.getName(filter));
    }
}

//add the organization(s) to the population
pop.addOrganization(org, Calendar.getInstance());

logger.log(Level.INFO, "Overriding any value set in ExternalCommFilterConfig.properties for timeout");
com.artistech.algolink.core.commfilters.ExternalCommFilter.setTimeout(shimTimeout);

logger.log(Level.INFO, "Overriding any value set in ShimCommFilterConfig.properties for size");
//This value should now be overriden by ec.getRequest/ResponseSize()
filter.setSize(responseSize);
//set the filter in the databuilder config
dbc.setCommFilter(filter);

//set the duration/realtime factor/name
dbc.setDuration(duration);
dbc.setRealTimeFactor(realTimeFactor);
dbc.setName("emane-noise");
//this should always be false for simulations run in a script
dbc.setTicking(false);

//create the databuilder
DataBuilder db = dbc.createDataBuilder(pop);

//create writers for serializing communications
IWriterFactory factory = WriterFactory.defaultFactory();
IAlgoLinkWriter w = factory.createInstance(JsonCommsWriter.class);
w.initialize(db);

//initialize, start, and wait
db.initialize();
logger.log(Level.INFO, "All modules have started");

Thread.sleep(1000);

Calendar start = Calendar.getInstance();
db.builderThread().start();
db.waitForTermination();
Calendar end = Calendar.getInstance();

//print out output
long consumed = end.getTimeInMillis() - start.getTimeInMillis();
logger.log(Level.INFO, "Time Consumed: {0} ms", new Object[]{consumed});
