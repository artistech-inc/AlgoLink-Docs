import com.artistech.algolink.orgs.noise.NoiseConfig;
import com.artistech.algolink.orgs.noise.NoiseOrganization;

import com.artistech.algolink.AlgoLinkInfo;
import com.artistech.algolink.core.ConfigBase;
import com.artistech.algolink.core.Organization;
import com.artistech.algolink.core.Population;
import com.artistech.algolink.annotations.OrgMeta;
import com.artistech.algolink.core.Communication;
import com.artistech.algolink.core.DataBuilder;
import com.artistech.algolink.ent.DataBuilderConfig;
import com.artistech.algolink.core.Entity;
import com.artistech.algolink.core.Group;
import com.artistech.algolink.core.IPopulation;
import com.artistech.algolink.core.PopulationConfig;
import com.artistech.algolink.mq.MqBroadcastFilter;
import com.artistech.algolink.exceptions.AlgoLinkException;
import com.artistech.algolink.exceptions.CommunicationException;
import com.artistech.algolink.listeners.IGroupListener;
import com.artistech.algolink.listeners.IPopulationListener;
import com.artistech.algolink.mq.CommunicationEvent;
import com.artistech.algolink.mq.Start;
import com.artistech.algolink.mq.Stop;
import com.artistech.algolink.mq.Tick;
import com.artistech.mq.ConnectionInfo;
import com.artistech.utils.Random;
import com.artistech.utils.TypeHandler;
import com.artistech.utils.logging.Logging;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collection;
import java.util.HashMap;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.jms.JMSException;
import javax.jms.Message;
import javax.jms.MessageConsumer;
import javax.jms.MessageListener;
import javax.jms.ObjectMessage;
import javax.jms.Topic;

//not strictly necessary, but if running multiple
//simulations in serial in the same script, this would be necessary
com.artistech.utils.Random.reset(true);
Logging.initLogging(new AlgoLinkInfo());

//initialize configs:
NoiseConfig nc = new NoiseConfig();
PopulationConfig pc = new PopulationConfig();
DataBuilderConfig dbc = new DataBuilderConfig();
dbc.setCommFilter(new MqBroadcastFilter());

//set parameter values:
nc.setStressTest(false);
nc.setCommsPerMinute(50);
pc.setSize(5000);

dbc.setDuration(60);
dbc.setName("noise-a");

//initialize orgs:
Organization org = nc.createOrganization(dbc.getStartTime());

//create population:
Population pop = pc.createPopulation(dbc.getStartTime());
pop.addOrganization(org, dbc.getStartTime());

//create databuilder:
DataBuilder db = dbc.createDataBuilder(pop);
db.addDbListener(new com.artistech.algolink.mq.MqDataBuilderBroadcaster());
//db.setThreadConfig(tc);

ConnectionInfo _ci = null;
try {
    _ci = new ConnectionInfo();
    Topic _topic = _ci.getSession().createTopic("AlgoLinkManagerTopic");
    MessageConsumer queueConsumer = _ci.getSession().createConsumer(_topic);
    final Logger logger = Logger.getLogger(NoiseOrganization.class.getName());
    queueConsumer.setMessageListener(new MessageListener() {

        public void onMessage(Message message) {
            if (message == null) {
                logger.log(Level.WARNING, String.format("Null JMS Message received, dropping it."));
                return;
            }

            try {
                if (message instanceof ObjectMessage) {
                    ObjectMessage temp = (ObjectMessage) message;
                    Object obj = temp.getObject();

                    if (obj instanceof Communication) {
                        Communication msg = (Communication) obj;
                        logger.log(Level.FINER, "Received Comm: {0}", msg.getId());
                    }
                    if (obj instanceof Tick) {
                        Tick msg = (Tick) obj;
                        logger.log(Level.FINER, "Received Tick: {0}", TypeHandler.dateToString(msg.getTime()));
                    }
                    if (obj instanceof Start) {
                        Start msg = (Start) obj;
                        logger.log(Level.FINER, "Received Start: {0}", TypeHandler.dateToString(msg.getTime()));
                    }
                    if (obj instanceof Stop) {
                        Stop msg = (Stop) obj;
                        logger.log(Level.FINER, "Received Stop: {0}", TypeHandler.dateToString(msg.getTime()));
                    }
                    if (obj instanceof CommunicationEvent) {
                        CommunicationEvent msg = (CommunicationEvent) obj;
                        logger.log(Level.FINER, "Received Communication [{2}]: {0} @ {1}", new Object[]{msg.getCommunication().getId(), TypeHandler.dateToString(msg.getTime()), msg.getType()});
                    }
                }
            } catch (JMSException ex) {
                logger.log(Level.SEVERE, String.format("JMS Communication Error:"));
                logger.log(Level.SEVERE, null, ex);
            }
        }
    });
} catch (NullPointerException ex) {
    Logger.getLogger(NoiseOrganization.class.getName()).log(Level.FINEST, null, ex);
    Logger.getLogger(NoiseOrganization.class.getName()).log(Level.WARNING, "No OpenMQ Server Found!");
} catch (JMSException ex) {
    Logger.getLogger(NoiseOrganization.class.getName()).log(Level.FINEST, null, ex);
    Logger.getLogger(NoiseOrganization.class.getName()).log(Level.WARNING, "No OpenMQ Server Found!");
}
//run and wait:
db.builderThread().start();
db.waitForTermination();
if (_ci != null) {
    _ci.close();
}
