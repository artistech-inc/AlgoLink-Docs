import com.artistech.algolink.mq.DistributedMaster;
import com.artistech.algolink.AlgoLinkInfo;

import com.artistech.algolink.ent.DataBuilderConfig;
import com.artistech.algolink.core.PopulationConfig;
import com.artistech.utils.logging.Logging;
import java.util.Calendar;
import java.util.logging.Logger;
import java.util.logging.Level;

Logging.initLogging(new AlgoLinkInfo());

for(int ii = 6; ii <= 6; ii++) {
    DataBuilderConfig dbc = new DataBuilderConfig();
    PopulationConfig pc = new PopulationConfig();

    dbc.setDuration(1440 * 28);
    pc.setSize(150000);

    Logger logger = Logger.getLogger("com.artistech.algolink.bsh.noise-ent");
    Calendar start = Calendar.getInstance();
    logger.log(Level.INFO, "Start Time for {1} SP: {0}", new Object[]{com.artistech.utils.TypeHandler.dateToString(start), ii});

    StringBuilder sb = new StringBuilder();
    sb.append("{");
    for(int jj = 0; jj < ii; jj++) {
        sb.append("\"sp" + Integer.toString(jj) + "\" : \"com.artistech.algolink.orgs.scenario1.Scenario1Config\"");
        if (jj < ii - 1) {
            sb.append(" , ");
        }
    }
    sb.append("}");

    String config = sb.toString();
    logger.log(Level.INFO, config);

    DistributedMaster dm = new DistributedMaster(dbc, pc);
    dm.setOrganizations(config);
    dm.addWriter(com.artistech.algolink.writers.JsonCommsWriter.class);

    Thread t = new Thread(dm);
    t.start();
    t.join();

    java.util.Calendar end = java.util.Calendar.getInstance();
    logger.log(Level.INFO, "End Time for {1} SP: {0}", new Object[]{com.artistech.utils.TypeHandler.dateToString(end), ii});
    long time = end.getTimeInMillis() - start.getTimeInMillis();
    logger.log(Level.INFO, "Time Consumed: {0} ms", new Object[]{time});

    System.gc();
}