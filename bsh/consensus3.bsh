import com.artistech.algolink.orgs.consensus3.Consensus2Config;

import com.artistech.algolink.AlgoLinkInfo;
import com.artistech.algolink.core.DataBuilder;
import com.artistech.algolink.core.DataBuilderConfig;
import com.artistech.algolink.core.Organization;
import com.artistech.algolink.core.Population;
import com.artistech.algolink.core.PopulationConfig;
import com.artistech.algolink.serializers.IAlgoLinkSerializer;
import com.artistech.algolink.serializers.JsonSerializer;
import com.artistech.utils.logging.Logging;
import com.artistech.algolink.writers.IAlgoLinkWriter;
import com.artistech.algolink.writers.IWriterFactory;
import com.artistech.algolink.writers.JsonCommsWriter;
import com.artistech.algolink.writers.WriterFactory;

//not strictly necessary, but if running multiple
//simulations in serial in the same script, this would be necessary

import java.util.logging.Logger;
import java.util.logging.Level;

//initialize the logging
Logging.initLogging(new AlgoLinkInfo());

//create a logger
Logger logger = Logger.getLogger("com.artistech.algolink.bsh.consensus3");

if (randomSeed == void) {
    randomSeed = 51;
} else {
    randomSeed = Integer.parseInt(randomSeed);
}

if (duration == void) {
    duration = 2000000;
} else {
    duration = Integer.parseInt(duration);
}

if (size == void) {
    size = 200;
} else {
    size = Integer.parseInt(size);
}

if (numberOfGroups == void) {
    numberOfGroups = 6;
} else {
    numberOfGroups = Integer.parseInt(numberOfGroups);
}

if (similarityThreshold == void) {
    similarityThreshold = 5;
} else {
    similarityThreshold = Integer.parseInt(similarityThreshold);
}

if (numberOfTopics == void) {
    numberOfTopics = 5;
} else {
    numberOfTopics = Integer.parseInt(numberOfTopics);
}

if (numberOfOpinionValues == void) {
    numberOfOpinionValues = 2;
} else {
    numberOfOpinionValues = Integer.parseInt(numberOfOpinionValues);
}

if (noChangeThreshold == void) {
    noChangeThreshold = 2000;
} else {
    noChangeThreshold = Integer.parseInt(noChangeThreshold);
}

//change seed value
//default is 51
com.artistech.utils.Random.setSeed(randomSeed);

for(int ii = 0; ii <= 5; ii++) {
    logger.log(Level.INFO, "Random Seed:                      {0}", new Object[]{ com.artistech.utils.Random.getSeed() });
    logger.log(Level.INFO, "Duration:                         {0}", new Object[]{ duration });
    logger.log(Level.INFO, "Organization Size (N):            {0}", new Object[]{ size });
    logger.log(Level.INFO, "Number of Groups (K):             {0}", new Object[]{ numberOfGroups });
    logger.log(Level.INFO, "Number of Topics (F):             {0}", new Object[]{ numberOfTopics });
    logger.log(Level.INFO, "Number of Opinion Values (q):     {0}", new Object[]{ numberOfOpinionValues });
    logger.log(Level.INFO, "Similarity Threshold (phi):       {0}", new Object[]{ ii });
    logger.log(Level.INFO, "No Change Threshold:              {0}", new Object[]{ noChangeThreshold });
    com.artistech.utils.Random.reset(true);

    //initialize configs:
    Consensus2Config nc = new Consensus2Config();
    //number of turns to detect no changes being made
    nc.setNoChangeThreshold(noChangeThreshold);
    //size of the organization
    nc.setN(size);
    //this is the average number of groups that an entity belongs to
    nc.setK(numberOfGroups);
    //this is the size of a group
    logger.log(Level.INFO, "Size of Groups (2):               {0}", new Object[]{ nc.getS() });
    //similarity threshold for rewire
    nc.setPhi(ii);
    //number of topics
    nc.setF(numberOfTopics);
    //number of values for a topic
    nc.setQ(numberOfOpinionValues);
    PopulationConfig pc = new PopulationConfig();
    DataBuilderConfig dbc = new DataBuilderConfig();

    //set parameter values:
    dbc.setDuration(duration);
    dbc.setRealTimeFactor(0);
    dbc.setName("consensus3-bsh" + "." + nc.getN() + "-size." + nc.getF() + "-opinions." + nc.getQ() + "-values." + nc.getPhi() + "-similarity." + nc.getK() + "-num_groups." + nc.getS() + "-grp_size");
    dbc.setTicking(false);
    pc.setSize(nc.getN());

    //initialize orgs:
    Organization org = nc.createOrganization(dbc.getStartTime());

    //create population:
    Population pop = pc.createPopulation(dbc.getStartTime());
    pop.addOrganization(org, dbc.getStartTime());

    //create databuilder:
    DataBuilder db = dbc.createDataBuilder(pop);
    db.initialize();

    //IAlgoLinkSerializer serializer = new JsonSerializer();
    //serializer.serialize(db, pop);

    //run and wait:
    if (!dbc.isTicking()) {
        db.builderThread().start();
        db.waitForTermination();
    } else {
        boolean success;
        do {
            success = db.doTick();
        } while(success);
    }
}