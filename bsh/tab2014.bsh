import com.artistech.algolink.orgs.tab2014.Tab2014Config;

import com.artistech.algolink.core.DataBuilder;
import com.artistech.algolink.core.DataBuilderConfig;
import com.artistech.algolink.core.Organization;
import com.artistech.algolink.core.Population;
import com.artistech.algolink.core.PopulationConfig;
import com.artistech.algolink.serializers.IAlgoLinkSerializer;
import com.artistech.algolink.serializers.JsonSerializer;
import com.artistech.algolink.writers.GexfWriter1;
import com.artistech.algolink.writers.GexfWriter2;
import com.artistech.algolink.writers.GexfWriter3;
import com.artistech.algolink.writers.IAlgoLinkWriter;
import com.artistech.algolink.writers.IWriterFactory;
import com.artistech.algolink.writers.JsonCommsWriter;
import com.artistech.algolink.writers.MgenWriter;
import com.artistech.algolink.writers.WriterFactory;

//not strictly necessary, but if running multiple
//simulations in serial in the same script, this would be necessary
com.artistech.utils.Random.reset(true);

//initialize configs:
Tab2014Config sc = new Tab2014Config();
DataBuilderConfig dbc = new DataBuilderConfig();
PopulationConfig pc = new PopulationConfig();

sc.setLengthCommunicate(200);   //200 is default
sc.setLengthDisseminate(200);   //200 is default
sc.setLengthAct(200);           //200 is default
sc.setLengthReport(0);          //0 out report phase

//scale data size:
sc.setPoissonPptSizeMean(sc.getPoissonPptSizeMean() / 100.0);
sc.setPoissonDocSizeMean(sc.getPoissonDocSizeMean() / 100.0);
sc.setPoissonImgSizeMean(sc.getPoissonImgSizeMean() / 100.0);
sc.setPoissonTxtSizeMean(sc.getPoissonTxtSizeMean() / 100.0);
sc.setPoissonVoiceLengthMean(3.0);

sc.setVoiceKbps(512.0);
sc.setDataTransmitKbps(1024.0);

//these are all in chance/percent per second after time scaling:
//CDR > PL PPT-file
sc.setCommunicateCdrToPlPPT(10.0);
//PL > SLs PPT-file
//Downward voice instructions
sc.setCommunicateDownwardVoiceInstructions(10.0);
//Upwards questions
sc.setCommunicateUpwardQuestions(10.0);
//CDR > PL images
sc.setCommunicateCdrToPlImg(10.0);
//PL > SLs image subsets
//Upwards questions (voice);
sc.setCommunicateUpwardQuestionsVoice(10.0);
//Downwards answers (voice);
sc.setCommunicateDownwardAnswersVoice(10.0);
//percent of images to pass on from PL to SL
sc.setCommunicatePercentImagePlToSl(50.0);

//low voice comms
sc.setDisseminatePlToSl(10.0);
//med image and voice
sc.setDisseminateSlToTl(20.0);
//heavy voice chatter
sc.setDisseminateSlTlTl(30.0);

//PL > SLs med voice comms
sc.setActPlToSl(70.0);
//SLs > TLs heavy voice
sc.setActSlToTl(80.0);
//SLs <> TLs <> TLs heavy voice chatter
sc.setActSlTlTl(80.0);
//Upward med image transmission
sc.setActUpwardImageTransmission(80.0);

//unused since report phse is set to 0
sc.setReportTlText(5);
sc.setReportTlDoc(2);
sc.setReportTlMinImage(1);
sc.setReportTlMaxImage(5);
//Each person, (above TL), sends only 1-3 images, and 1 doc upwards
sc.setReportMinUpwardImage(1);
sc.setReportMaxUpwardImage(3);
sc.setReportNumUpwardDoc(1);

//initialize orgs:
Organization o = sc.createOrganization(dbc.getStartTime());

//set parameter values:
pc.setSize(o.getMaxSize());
dbc.setDuration((int) (sc.getLengthCommunicate() + sc.getLengthDisseminate() + sc.getLengthAct() + sc.getLengthReport()));
dbc.setRealTimeFactor(0);
dbc.setName("Tab2014-a");

//create population:
Population pop = pc.createPopulation(dbc.getStartTime());
pop.addOrganization(o, dbc.getStartTime());

//create data builder:
DataBuilder db = dbc.createDataBuilder(pop);

//initialize serializers/writers:
IWriterFactory factory = WriterFactory.defaultFactory();
IAlgoLinkWriter w = factory.createInstance(MgenWriter.class);
w.setProperty("timeScaleFactor", 60.0);
w.initialize(db);
// w = factory.createInstance(JsonCommsWriter.class);
// w.initialize(db);
w = factory.createInstance(GexfWriter1.class);
w.initialize(db);
w = factory.createInstance(GexfWriter2.class);
w.initialize(db);
w = factory.createInstance(GexfWriter3.class);
w.initialize(db);
db.initialize();

IAlgoLinkSerializer serializer = new JsonSerializer();
serializer.serialize(db, pop);

//run and wait:
db.builderThread().start();
db.waitForTermination();
